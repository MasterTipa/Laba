#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <locale.h>
using namespace std;
//9.	Создать класс «Котик» со следующими данными: 
//id – уникальный номер, name – ФИО, diagnosis – диагноз. 
//Создать дружественный класс «Ветеринар», 
//в котором реализовать метод установки диагноза котика.
class Kotik 
{
public:
	Kotik() { /*cout << "\nTry build";*/ }
	~Kotik() {/* cout << "\nTry destroy";*/ }
	void SetId(int static x) { id = x; rewind(stdin);}
	void SetName(string s) { name = s;  rewind(stdin);}
	void SetDiagnos(string s) { diagnosis = s;};
	int GetId() { cout << "Id вашего существа";  return id; }
	string GetName() { cout << "Вы назвали существо"; return name; }
	string GetDiagnos() { cout << "Так ваше существо болеет"; return diagnosis; }
private:
	int id;
	string name;
	string diagnosis;
	friend class Veterinar;
	friend void out();
};
class Veterinar
{
public:
	void ID(Kotik &kot) 
	{
		cout << "\nНу и какой диагноз поставил ветеринар?\n";
		string TEMP;
		rewind(stdin);
		getline(cin, TEMP);
		kot.diagnosis = TEMP;
		rewind(stdin);
		/*
		void SetDiagnos(string s)
			 { kot.diagnosis = s; }
	*/}
	void IN(Kotik& kot)
	{
		cout << "Введите имя существа, которое будем лечить\n";
		rewind(stdin);
		string TEMP;
		getline(cin, TEMP);
		kot.name = TEMP;
		rewind(stdin);
	}
	void II(Kotik& kot)
	{
		cout << "\nКакое Id получит ваше существо?\n";
		rewind(stdin);
		int TEMP;
		while (!scanf_s("%d", &TEMP)) { cout << "Я знаю, что вы шутите))) "; rewind(stdin); };
		kot.id = TEMP;
		rewind(stdin);
	}
};
void out();
void InterName();
void InterDiagnos();
void InterId();
void funtime();
Kotik* gg;
Veterinar* gh;
int main()
{
	setlocale(LC_ALL, "Russian");//В память о великом преподователе
	gg = new Kotik();
	gh = new Veterinar();
	InterName();	cout << "\n" << gg->GetName();
	InterId();		cout << "\n" << gg->GetId();
	InterDiagnos();	cout << "\n" << gg->GetDiagnos();
	funtime();
	out();
}
void InterName()
{
	cout << "Введите имя существа, которое будем лечить\n";
	string TEMP;
	getline(cin, TEMP);
	gg->SetName(TEMP);
}
void InterDiagnos()
{
	cout << "\nНу и какой диагноз поставил ветеринар?\n";
	//gh->SetD(*gg);
	string TEMP;
	getline(cin, TEMP);
	gg->SetDiagnos(TEMP);
}
void InterId()
{
	cout << "\nКакое Id получит ваше существо?\n";
	int TEMP;
	while (!scanf_s("%d", &TEMP)) { cout << "Я знаю, что вы шутите))) "; rewind(stdin); };
	gg->SetId(TEMP);
}
void funtime()
{
	cout << "\nТеперь всё то же самое, но через дружественный класс...\n";
	gh->IN(*gg);	cout << "\n" << gg->GetName();
	gh->II(*gg);	cout << "\n" << gg->GetId();
	gh->ID(*gg);	cout << "\n" << gg->GetDiagnos();
}
void out() {
	cout << "\nТеперь всё то же самое, но через дружественную функцию...\n";
	gh->IN(*gg);	cout << "\n" << gg->GetName();
	gh->II(*gg);	cout << "\n" << gg->GetId();
	gh->ID(*gg);	cout << "\n" << gg->GetDiagnos();
};

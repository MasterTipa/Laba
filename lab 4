#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <ctime>
using namespace std;
class BoardGame {
protected:
	string NameOfGame;
public:
	BoardGame(string name) 
	{
		this->NameOfGame=name;
	};
	~BoardGame() { cout << "\nDestroy\n"; };
	virtual void Output()
	{
		cout << NameOfGame << endl;
	};
};
class CardGame :virtual public BoardGame {
protected :
	int Cards;
public:
	CardGame (string name, int card): BoardGame(name)
	{
		this->Cards=card;
	}
	~CardGame() { cout << "\nDestroy\n"; };
	void Output()
	{
		cout << NameOfGame << "\n" << Cards;
	}
};
class FigureGame :virtual public BoardGame{
protected:
	int Figure;
public:
	FigureGame(string name, int figure) : BoardGame(name) 
	{
		this->Figure=figure;
	}
	~FigureGame() { cout << "\nDestroy\n"; };
	void Output()
	{
		cout << NameOfGame << "\n" << Figure;
	}
};
class CardType : public CardGame {
protected :
	string Type;
public:
	CardType(string name, int card, string type) :CardGame(name, card),BoardGame(name)
	{
		this->Type=type;
	};
	~CardType() { cout << "\nDestroy\n"; };
	void Output() 
	{
		cout << NameOfGame << "\n" << Cards << "\n" << Type;
	}
};
class FigureType :public FigureGame {
protected:
	string Type;
public:
	FigureType(string name, int figure, string type) :FigureGame(name, figure),BoardGame(name)
	{
		this->Type=type;
	}
	~FigureType() { cout << "\nDestroy\n"; };
	void Output() {
		cout << NameOfGame << "\n" << Figure << "\n" << Type;
	}
};
class Gamers :public FigureType, public CardType 
{
protected:
	int Number;
public:
	Gamers(string name, int figure, int card, string type1, string type2, int num) :
		FigureType(name, figure, type1), CardType(name, card, type2) , BoardGame(name)
	{
		this->Number=num;
	}
	~Gamers() { cout << "\nDestroy\n"; };
	void Output() 
	{ 
		cout << "All Figures\n" << FigureType::NameOfGame << "\n" << Figure << "\n" << FigureType::Type << "\n" << Number;
		cout<<"\nAll Card\n" << CardType::NameOfGame << "\n" << Cards << "\n" << CardType::Type << "\n" << Number;
	};

};
int input();
int main()
{
	string Name,Type1,Type2;
	cout << "Input name of game : ";
	rewind(stdin);
	getline(cin, Name);
	cout << "Input type of figure : ";
	rewind(stdin);
	getline(cin, Type1);
	cout << "Input type of card : ";
	rewind(stdin);
	getline(cin, Type2);
	int Figure=input(), Cards=input(), Number=input();
	Gamers *ss=new Gamers("Gacha",69,32,"Squrd","Poker",6);
	ss->Output();
	delete ss;
	Gamers* ll = new Gamers(Name,Figure,Cards,Type1,Type2,Number);
	ll->Output();
	delete ll;
}
int input() {
	int i;
	bool fail = true;
	cout << "\nInput:";
	do
	{
		cin >> i;
		if (cin.fail() || cin.rdbuf()->in_avail() > 1)
			cout << "\nError" << endl;
		else
			fail = false;
		cin.clear();
		cin.ignore(cin.rdbuf()->in_avail());
	} while (fail);
	return i;
}

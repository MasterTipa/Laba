#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <ctime>

using namespace std;

int input();
class MShell 
{
public:
	MShell();
	MShell(int);
	MShell(MShell&);
	~MShell();
	friend void show(MShell);
	friend bool sravn(MShell body1, MShell body2);
	friend const MShell operator+(const MShell& left, const MShell& right)
	{
		return (left.ss + right.ss);
	};
	friend const MShell operator-(const MShell& left, const MShell& right)
	{
		return (left.ss - right.ss);
	};
	friend ostream& operator<<(ostream& out, const MShell &temp);
	void ShellSort()
	{
		int step, i, j, tmp;
		// Выбор шага
		//cout << "\n\n\n" << array.ss << " " << *array.zn << " " << *(array.zn+1) << " " << endl;
		for (step = ss / 2; step > 0; step /= 2)
			// Перечисление элементов, которые сортируются на определённом шаге
			for (i = step; i < ss; i++)
				// Перестановка элементов внутри подсписка, пока i-тый не будет отсортирован
				for (j = i - step; j >= 0 && *(zn + j) > * (zn + j + step); j -= step)
				{
					swap(*(zn + j + step), *(zn + j));
					/*tmp = *(array.zn+j);
					*(array.zn+j) = *(array.zn+j + step);
					*(array.zn+j + step) = tmp;
				*/
				}
	}
	void ReadMass(int size) {
		zn = new int[size];
		ss = size;
		for (int i = 0;i < size;i++)
			zn[i] = input();
	};
private:
	int* zn;
	int ss;
};
ostream& operator<<(ostream& out, const MShell& temp) {
	out << "Size of mas " << temp.ss <<" First element "<<*temp.zn<<endl;
	return out;
};
MShell::MShell()
{
	//cout << "1"<<endl;
	zn = new int[1];
	ss = 1;
		zn[ss-1] = rand() % 100;
};
MShell::MShell(int size)
{
	//cout << "2" << endl;
	zn = new int[size];
	ss = size;
	for (int i = 0;i < size;i++)
		zn[i] = rand() % 100;
};
MShell::MShell(MShell& copy)
{
	//cout << "3" << endl;
	ss = copy.ss;
	zn = new int[ss];
	for (int i = 0;i < ss;i++)
		zn[i] = copy.zn[i];
};
MShell::~MShell() {
	//cout << "4" << endl;
	while(!zn) delete[] zn;
};
void show(MShell);
bool sravn(MShell body1, MShell body2);
int main()
{
	int sz = 5;
	srand(time_t(NULL));
	MShell mas;
	mas=MShell();
	show(mas);
	mas=MShell(sz);
	show(mas);
	mas.ShellSort();
	show(mas);
	cout << "Size of mas : ";
	sz=input();
	cout << "\nTime to read mas : ";
	mas.ReadMass(sz);
	show(mas);
	mas.ShellSort();
	show(mas);
	MShell mas2;
	mas2 = MShell(5);
	cout << "Work with operator +, - and << \n";
	MShell mas3;
	mas3=mas + mas2;
	show(mas3);
	cout << mas3;
	if (sravn(mas2 , mas))
	mas3 = mas2 - mas; else mas3 = mas - mas2;
	show(mas3);
	cout << mas3;
	return 0;
}
void show(MShell body) 
{
	for (int i = 0;i < body.ss;i++)
		cout << body.zn[i]<<" ";
	cout << endl;
}
bool sravn(MShell body1, MShell body2) {
	if (body1.ss > body2.ss) return 1; else return 0;
}
int input() {
	int i = 1, _int;
	while (i)
	{
		cin >> _int;
		if (!cin) {
			cout << "Yarik, buffer potik\n";
			rewind(stdin);
			cin.clear();
		}
		else i = 0;
	}
	return _int;
}
